{"ast":null,"code":"import _objectSpread from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { SHOW_PAWFILE_FORM, CHANGE_SORTING_PETS_METHOD, TOGGLE_NAVBAR, SHOW_MEDICAL_FORM, SHOW_MEMORY_FORM, SHOW_REMINDER_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER, CHANGE_CURRENT_PET_ID } from '../actions/index';\nimport { FETCH_PAWFILES_SUCCESS, FETCH_PAWFILES_REQUEST, CHANGE_PAWFILES_PENDING, CHANGE_ERROR, SUBMIT_PAWFILE_REQUEST, SUBMIT_PAWFILE_SUCCESS, DELETE_PAWFILE_REQUEST, DELETE_PAWFILE_SUCCESS } from '../actions/pawfile-crud';\nimport { SUBMIT_REMINDER_REQUEST, SUBMIT_REMINDER_SUCCESS, CRUD_ERROR, DELETE_REMINDER_REQUEST, DELETE_REMINDER_SUCCESS } from '../actions/reminder-crud';\nimport { SUBMIT_POST_REQUEST, SUBMIT_POST_SUCCESS, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post-crud'; //dummy initial state \n\nvar initialState = {\n  user: {\n    firstName: 'Nikkie',\n    lastName: 'Mashian'\n  },\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  showReminderForm: false,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar: false,\n  currentPawfileFormId: undefined,\n  currentPetId: undefined,\n  currentPostId: undefined,\n  currentReminderId: undefined,\n  pawfiles: [],\n  pawfilesPending: true,\n  error: false\n};\nexport var pawfileReducer = function pawfileReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  /* GENERAL STUFF */\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile.\n  if (action.type === SHOW_PAWFILE_FORM) {\n    console.log('IN SHOW reducer, currentPawfileFormId is', action.currentPawfileFormId);\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPawfileFormId: action.currentPawfileFormId\n    });\n  } else if (action.type === CHANGE_CURRENT_PET_ID) {\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === CHANGE_SORTING_PETS_METHOD) {\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod\n    });\n  } else if (action.type === TOGGLE_NAVBAR) {\n    if (action.bool === true || action.bool === false) {\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool\n      });\n    }\n\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar\n    });\n  } else if (action.type === SHOW_REMINDER_FORM) {\n    console.log('in show reminder form reducer');\n    return Object.assign({}, state, {\n      showReminderForm: action.bool,\n      currentReminderId: action.currentReminderId\n    });\n  } else if (action.type === SHOW_MEDICAL_FORM) {\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool,\n      currentPostId: action.currentPostId\n    });\n  } else if (action.type === SHOW_MEMORY_FORM) {\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool,\n      currentPostId: action.currentPostId\n    });\n  } else if (action.type === CHANGE_SEARCH_TERM) {\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm\n    });\n  } else if (action.type === CHANGE_CATEGORY_FILTER) {\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter\n    });\n  }\n  /* CRUD-RELATED STUFF */\n  else if (action.type === CHANGE_ERROR) {\n      return Object.assign({}, state, {\n        error: action.bool\n      });\n    } else if (action.type === CRUD_ERROR) {\n      return Object.assign({}, state, {\n        pawfilesPending: false,\n        error: true\n      });\n    } else if (action.type === CHANGE_PAWFILES_PENDING) {\n      console.log('changing pending to', action.bool);\n      return Object.assign({}, state, {\n        pawfilesPending: action.bool\n      });\n    } else if (action.type === FETCH_PAWFILES_REQUEST) {\n      return Object.assign({}, state, {\n        pawfilesPending: true\n      });\n    } else if (action.type === FETCH_PAWFILES_SUCCESS) {\n      console.log('successfully fetching all pawfiles', action.pawfiles);\n      return Object.assign({}, state, {\n        pawfiles: action.pawfiles,\n        pawfilesPending: false\n      });\n    } else if (action.type === SUBMIT_PAWFILE_REQUEST) {\n      return Object.assign({}, state, {\n        pawfilesPending: true\n      });\n    } else if (action.type === SUBMIT_PAWFILE_SUCCESS) {\n      //if its editing an existing pawfile: \n      if (action.currentPetId) {\n        console.log('updating in reducer with pawfile', action.pawfile);\n        var updatedPawfile = action.pawfile;\n        var newArrayOfPawfiles = state.pawfiles.map(function (item) {\n          return item.id == action.currentPetId ? updatedPawfile : item;\n        });\n        return Object.assign({}, state, {\n          pawfiles: newArrayOfPawfiles,\n          // individualPawfile: action.pawfile,\n          pawfilesPending: false\n        });\n      } //if its a new obj\n\n\n      console.log('POST in reducer with pawfile', action.pawfile);\n      return Object.assign({}, state, {\n        pawfiles: [].concat(_toConsumableArray(state.pawfiles), [action.pawfile]),\n        pawfilesPending: false\n      });\n    } else if (action.type === DELETE_PAWFILE_REQUEST) {\n      return Object.assign({}, state, {\n        pawfilesPending: true\n      });\n    } else if (action.type === DELETE_PAWFILE_SUCCESS) {\n      console.log('in deleting success reducer');\n\n      var _newArrayOfPawfiles = state.pawfiles.filter(function (pawfile) {\n        return pawfile.id !== action.currentPetId;\n      });\n\n      return Object.assign({}, state, {\n        pawfiles: _newArrayOfPawfiles,\n        pawfilesPending: false\n      });\n    } // FOR REMINDER: \n    else if (action.type === SUBMIT_REMINDER_REQUEST) {\n        return Object.assign({}, state, {\n          pawfilesPending: true\n        });\n      } //not getting back a single reminder, but the whole pawfile. fix.\n      else if (action.type === SUBMIT_REMINDER_SUCCESS) {\n          var _updatedPawfile = action.pawfile;\n\n          var _newArrayOfPawfiles2 = state.pawfiles.map(function (item) {\n            return item.id == action.currentPetId ? _updatedPawfile : item;\n          });\n\n          console.log('in reminder reducer, new array of apwfiles is', _newArrayOfPawfiles2);\n          return Object.assign({}, state, {\n            pawfilesPending: false,\n            pawfiles: _newArrayOfPawfiles2\n          });\n        } else if (action.type === DELETE_REMINDER_REQUEST) {\n          return Object.assign({}, state, {\n            pawfilesPending: true\n          });\n        } else if (action.type === DELETE_REMINDER_SUCCESS) {\n          var pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n            return pawfile.id == action.currentPetId;\n          }));\n\n          var updatedReminders = pawfileToUpdate.reminders.filter(function (reminder) {\n            return reminder.id !== action.reminderId;\n          });\n          pawfileToUpdate.reminders = updatedReminders;\n\n          var _newArrayOfPawfiles3 = state.pawfiles.map(function (item) {\n            return item.id == action.currentPetId ? pawfileToUpdate : item;\n          });\n\n          return Object.assign({}, state, {\n            pawfiles: _newArrayOfPawfiles3,\n            pawfilesPending: false\n          });\n        }\n        /* POSTS */\n        else if (action.type === SUBMIT_POST_REQUEST) {\n            return Object.assign({}, state, {\n              pawfilesPending: true\n            });\n          } //not getting back a single post, but the whole pawfile.\n          else if (action.type === SUBMIT_POST_SUCCESS) {\n              var _updatedPawfile2 = action.pawfile;\n\n              var _newArrayOfPawfiles4 = state.pawfiles.map(function (item) {\n                return item.id == action.currentPetId ? _updatedPawfile2 : item;\n              });\n\n              return Object.assign({}, state, {\n                pawfilesPending: false,\n                pawfiles: _newArrayOfPawfiles4\n              });\n            } else if (action.type === DELETE_POST_REQUEST) {\n              return Object.assign({}, state, {\n                pawfilesPending: true\n              });\n            } else if (action.type === DELETE_POST_SUCCESS) {\n              var _pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n                return pawfile.id == action.currentPetId;\n              }));\n\n              console.log('in deleting post reducer, pawfile to update is', _pawfileToUpdate, 'post to update is', action.postId);\n\n              var updatedPosts = _pawfileToUpdate.posts.filter(function (post) {\n                return post.id !== action.postId;\n              });\n\n              _pawfileToUpdate.posts = updatedPosts;\n\n              var _newArrayOfPawfiles5 = state.pawfiles.map(function (item) {\n                return item.id == action.currentPetId ? _pawfileToUpdate : item;\n              });\n\n              console.log('in deleting post reducer, new array is', _newArrayOfPawfiles5);\n              return Object.assign({}, state, {\n                pawfiles: _newArrayOfPawfiles5,\n                pawfilesPending: false\n              });\n            } // else if(action.type===SUBMIT_MEDICAL_FORM){\n  //   let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n  //   //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n  //   let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n  //   if(previousPosts){\n  //     pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n  //   }\n  //   else{\n  //     pawfileToUpdate.posts = [action.values];\n  //   }\n  //   //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n  //   if(action.values.vaccinations)\n  //   {\n  //     let vaccinationList = action.values.vaccinations.map(vaccination=>{\n  //       return {name: vaccination, date: action.values.date}\n  //     })\n  //     let previousVaccinations = pawfileToUpdate.vaccinations  ? [...pawfileToUpdate.vaccinations ] : '';\n  //     if(previousVaccinations){\n  //       pawfileToUpdate.vaccinations = [...pawfileToUpdate.vaccinations, ...vaccinationList];      \n  //     }\n  //     else{\n  //       pawfileToUpdate.vaccinations = [...vaccinationList];\n  //     }\n  //   }\n  //   if(action.values.prescriptions)\n  //   {\n  //     let prescriptionList = action.values.prescriptions.map(prescription=>{\n  //       return {name: prescription, date: action.values.date}\n  //     })\n  //     let previousPrescriptions = pawfileToUpdate.prescriptions  ? [...pawfileToUpdate.prescriptions ] : '';\n  //     if(previousPrescriptions){\n  //       pawfileToUpdate.prescriptions = [...pawfileToUpdate.prescriptions, ...prescriptionList];\n  //     }\n  //     else{\n  //       pawfileToUpdate.prescriptions = [...prescriptionList];\n  //     }\n  //   }\n  //   const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n  //   return Object.assign({}, state, {\n  //     pawfiles: newArrayOfPawfiles\n  //   })\n  // }\n\n\n  return state;\n}; //load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display.","map":{"version":3,"sources":["/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/reducers/pawfile-reducer.js"],"names":["SHOW_PAWFILE_FORM","CHANGE_SORTING_PETS_METHOD","TOGGLE_NAVBAR","SHOW_MEDICAL_FORM","SHOW_MEMORY_FORM","SHOW_REMINDER_FORM","CHANGE_SEARCH_TERM","CHANGE_CATEGORY_FILTER","CHANGE_CURRENT_PET_ID","FETCH_PAWFILES_SUCCESS","FETCH_PAWFILES_REQUEST","CHANGE_PAWFILES_PENDING","CHANGE_ERROR","SUBMIT_PAWFILE_REQUEST","SUBMIT_PAWFILE_SUCCESS","DELETE_PAWFILE_REQUEST","DELETE_PAWFILE_SUCCESS","SUBMIT_REMINDER_REQUEST","SUBMIT_REMINDER_SUCCESS","CRUD_ERROR","DELETE_REMINDER_REQUEST","DELETE_REMINDER_SUCCESS","SUBMIT_POST_REQUEST","SUBMIT_POST_SUCCESS","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","initialState","user","firstName","lastName","sortingPetsMethod","showPawfileForm","showMedicalForm","showMemoryForm","showReminderForm","currentSearchTerm","categoryFilter","toggleNavbar","currentPawfileFormId","undefined","currentPetId","currentPostId","currentReminderId","pawfiles","pawfilesPending","error","pawfileReducer","state","action","type","console","log","Object","assign","bool","sortMethod","searchTerm","pawfile","updatedPawfile","newArrayOfPawfiles","map","item","id","filter","pawfileToUpdate","find","updatedReminders","reminders","reminder","reminderId","postId","updatedPosts","posts","post"],"mappings":"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","sourcesContent":["import {SHOW_PAWFILE_FORM, CHANGE_SORTING_PETS_METHOD, TOGGLE_NAVBAR, SHOW_MEDICAL_FORM, SHOW_MEMORY_FORM, SHOW_REMINDER_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER, CHANGE_CURRENT_PET_ID} from '../actions/index';\n\nimport {FETCH_PAWFILES_SUCCESS, FETCH_PAWFILES_REQUEST, CHANGE_PAWFILES_PENDING, CHANGE_ERROR, SUBMIT_PAWFILE_REQUEST, SUBMIT_PAWFILE_SUCCESS, DELETE_PAWFILE_REQUEST, DELETE_PAWFILE_SUCCESS} from '../actions/pawfile-crud'\n\nimport {SUBMIT_REMINDER_REQUEST, SUBMIT_REMINDER_SUCCESS, CRUD_ERROR, DELETE_REMINDER_REQUEST, DELETE_REMINDER_SUCCESS} from '../actions/reminder-crud'\n\nimport {SUBMIT_POST_REQUEST, SUBMIT_POST_SUCCESS, DELETE_POST_REQUEST, DELETE_POST_SUCCESS} from '../actions/post-crud'\n\n\n//dummy initial state \nconst initialState = {\n  user: {firstName: 'Nikkie', lastName: 'Mashian'},\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  showReminderForm: false,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar:false,\n\n  currentPawfileFormId: undefined,\n  currentPetId: undefined,\n  currentPostId: undefined,\n  currentReminderId: undefined,\n  pawfiles: [],\n  pawfilesPending: true,\n  error: false,\n};\n\nexport const pawfileReducer = (state = initialState, action)=> {\n\n  /* GENERAL STUFF */\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile.\n  if(action.type=== SHOW_PAWFILE_FORM){\n    console.log('IN SHOW reducer, currentPawfileFormId is', action.currentPawfileFormId)\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPawfileFormId: action.currentPawfileFormId\n    })\n  }\n\n  else if(action.type===CHANGE_CURRENT_PET_ID){\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId,\n    })\n  }\n\n  else if (action.type=== CHANGE_SORTING_PETS_METHOD){\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod,\n    })\n  }\n\n  else if (action.type===TOGGLE_NAVBAR){\n    if(action.bool===true || action.bool===false){\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool,\n      })\n    }\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar,\n    })\n  }\n\n  else if(action.type===SHOW_REMINDER_FORM){\n    console.log('in show reminder form reducer');\n    return Object.assign({}, state, {\n      showReminderForm: action.bool,\n      currentReminderId: action.currentReminderId,\n    })\n  }\n\n  else if(action.type===SHOW_MEDICAL_FORM){\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool,\n      currentPostId: action.currentPostId,\n    })\n  }\n\n  else if(action.type===SHOW_MEMORY_FORM){\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool,\n      currentPostId: action.currentPostId,\n    })\n  }\n\n  else if(action.type===CHANGE_SEARCH_TERM){\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm,\n    })\n  }\n\n  else if(action.type===CHANGE_CATEGORY_FILTER){\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter,\n    })\n  }\n\n  /* CRUD-RELATED STUFF */\n\n  else if(action.type===CHANGE_ERROR){\n    return Object.assign({}, state, {\n      error: action.bool,\n    })\n  }  \n  \n  else if (action.type===CRUD_ERROR){\n    return Object.assign({}, state, {\n      pawfilesPending: false,\n      error: true,\n    })\n  }\n\n  else if(action.type===CHANGE_PAWFILES_PENDING){\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool,\n    })\n  }\n\n  else if (action.type === FETCH_PAWFILES_REQUEST) {\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('successfully fetching all pawfiles', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===SUBMIT_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type===SUBMIT_PAWFILE_SUCCESS){\n    //if its editing an existing pawfile: \n    if(action.currentPetId){\n      console.log('updating in reducer with pawfile', action.pawfile);\n      const updatedPawfile = action.pawfile;\n\n      const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n  \n      return Object.assign({}, state, {\n          pawfiles: newArrayOfPawfiles,\n          // individualPawfile: action.pawfile,\n          pawfilesPending: false,\n      })\n    }\n\n    //if its a new obj\n    console.log('POST in reducer with pawfile', action.pawfile);\n    return Object.assign({}, state, {\n      pawfiles: [\n        ...state.pawfiles,\n        action.pawfile\n      ],\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===DELETE_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type===DELETE_PAWFILE_SUCCESS){\n    console.log('in deleting success reducer')\n    const newArrayOfPawfiles = state.pawfiles.filter((pawfile)=> (pawfile.id!==action.currentPetId));\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  // FOR REMINDER: \n  else if (action.type===SUBMIT_REMINDER_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  //not getting back a single reminder, but the whole pawfile. fix.\n  else if (action.type=== SUBMIT_REMINDER_SUCCESS){\n    const updatedPawfile = action.pawfile;\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n\n    console.log('in reminder reducer, new array of apwfiles is', newArrayOfPawfiles);\n    return Object.assign({}, state, {\n        pawfilesPending: false,\n        pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if (action.type===DELETE_REMINDER_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type=== DELETE_REMINDER_SUCCESS){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    const updatedReminders = pawfileToUpdate.reminders.filter((reminder)=> (reminder.id!==action.reminderId));\n\n    pawfileToUpdate.reminders=updatedReminders;\n\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  /* POSTS */\n  else if (action.type===SUBMIT_POST_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  //not getting back a single post, but the whole pawfile.\n  else if (action.type=== SUBMIT_POST_SUCCESS){\n    const updatedPawfile = action.pawfile;\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n\n    return Object.assign({}, state, {\n        pawfilesPending: false,\n        pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if (action.type===DELETE_POST_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type=== DELETE_POST_SUCCESS){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    console.log('in deleting post reducer, pawfile to update is', pawfileToUpdate, 'post to update is', action.postId);\n\n    const updatedPosts = pawfileToUpdate.posts.filter((post)=> (post.id!==action.postId));\n\n    pawfileToUpdate.posts=updatedPosts;\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    console.log('in deleting post reducer, new array is', newArrayOfPawfiles);\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  // else if(action.type===SUBMIT_MEDICAL_FORM){\n  //   let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n  //   //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n  //   let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n  //   if(previousPosts){\n  //     pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n  //   }\n  //   else{\n  //     pawfileToUpdate.posts = [action.values];\n  //   }\n\n  //   //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n  //   if(action.values.vaccinations)\n  //   {\n  //     let vaccinationList = action.values.vaccinations.map(vaccination=>{\n  //       return {name: vaccination, date: action.values.date}\n  //     })\n\n  //     let previousVaccinations = pawfileToUpdate.vaccinations  ? [...pawfileToUpdate.vaccinations ] : '';\n\n  //     if(previousVaccinations){\n  //       pawfileToUpdate.vaccinations = [...pawfileToUpdate.vaccinations, ...vaccinationList];      \n  //     }\n  //     else{\n  //       pawfileToUpdate.vaccinations = [...vaccinationList];\n  //     }\n  //   }\n\n  //   if(action.values.prescriptions)\n  //   {\n  //     let prescriptionList = action.values.prescriptions.map(prescription=>{\n  //       return {name: prescription, date: action.values.date}\n  //     })\n\n  //     let previousPrescriptions = pawfileToUpdate.prescriptions  ? [...pawfileToUpdate.prescriptions ] : '';\n\n  //     if(previousPrescriptions){\n  //       pawfileToUpdate.prescriptions = [...pawfileToUpdate.prescriptions, ...prescriptionList];\n     \n  //     }\n  //     else{\n  //       pawfileToUpdate.prescriptions = [...prescriptionList];\n  //     }\n  //   }\n\n  //   const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n  //   return Object.assign({}, state, {\n  //     pawfiles: newArrayOfPawfiles\n  //   })\n  // }\n\n  return state;\n}\n\n\n//load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display. "]},"metadata":{},"sourceType":"module"}