{"ast":null,"code":"import _objectSpread from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { SHOW_PAWFILE_FORM, CHANGE_SORTING_PETS_METHOD, TOGGLE_NAVBAR, CHANGE_CURRENT_PET_ID, SHOW_MEDICAL_FORM, SUBMIT_MEDICAL_FORM, SHOW_MEMORY_FORM, SUBMIT_MEMORY_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER } from '../actions/index';\nimport { FETCH_PAWFILES_SUCCESS, FETCH_INDIVIDUAL_PAWFILE_SUCCESS, CHANGE_PAWFILES_PENDING, CHANGE_INDIVIDUAL_PAWFILE_PENDING, FETCH_INDIVIDUAL_PAWFILE_REQUEST, FETCH_INDIVIDUAL_PAWFILE_ERROR, CHANGE_ERROR, SUBMIT_PAWFILE_REQUEST, SUBMIT_PAWFILE_SUCCESS, DELETE_PAWFILE_REQUEST, DELETE_PAWFILE_SUCCESS } from '../actions/pawfile-crud';\nimport { SUBMIT_REMINDER_REQUEST, SUBMIT_REMINDER_SUCCESS, CRUD_ERROR, DELETE_REMINDER_REQUEST, DELETE_REMINDER_SUCCESS } from '../actions/reminder-crud';\nimport { SUBMIT_POST_REQUEST, SUBMIT_POST_SUCCESS } from '../actions/post-crud'; //dummy initial state \n\nvar initialState = {\n  user: {\n    firstName: 'Nikkie',\n    lastName: 'Mashian'\n  },\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  currentPetId: undefined,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar: false,\n  pawfiles: [],\n  individualPawfile: {},\n  pawfilesPending: true,\n  individualPawfilePending: true,\n  error: \"\"\n};\nexport var pawfileReducer = function pawfileReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile. Need to set the currentPetId to either the id of the pet being edited, or undefined if it's a new pet/closing form\n  if (action.type === SHOW_PAWFILE_FORM) {\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === CHANGE_SORTING_PETS_METHOD) {\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod\n    });\n  } else if (action.type === TOGGLE_NAVBAR) {\n    if (action.bool === true || action.bool === false) {\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool\n      });\n    }\n\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar\n    });\n  } else if (action.type === CHANGE_CURRENT_PET_ID) {\n    console.log('changing id', action.currentPetId);\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === SHOW_MEDICAL_FORM) {\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool\n    });\n  } else if (action.type === SHOW_MEMORY_FORM) {\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool\n    });\n  } else if (action.type === CHANGE_SEARCH_TERM) {\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm\n    });\n  } else if (action.type === CHANGE_CATEGORY_FILTER) {\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter\n    });\n  } else if (action.type === CHANGE_ERROR) {\n    return Object.assign({}, state, {\n      error: action.bool\n    });\n  } else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('successfully fetching all pawfiles', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles,\n      pawfilesPending: false\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_SUCCESS) {\n    console.log('in success for indiv pawfile, fetched', action.pawfile);\n    return Object.assign({}, state, {\n      individualPawfile: action.pawfile,\n      individualPawfilePending: false\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_REQUEST) {\n    return Object.assign({}, state, {\n      individualPawfilePending: true\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_ERROR) {\n    console.log('in error of fetching');\n    return Object.assign({}, state, {\n      individualPawfilePending: false,\n      error: true\n    });\n  } else if (action.type === CHANGE_PAWFILES_PENDING) {\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool\n    });\n  } else if (action.type === CHANGE_INDIVIDUAL_PAWFILE_PENDING) {\n    return Object.assign({}, state, {\n      individualPawfilePending: action.bool\n    });\n  } else if (action.type === SUBMIT_PAWFILE_REQUEST) {\n    return Object.assign({}, state, {\n      pawfilesPending: true\n    });\n  } else if (action.type === SUBMIT_PAWFILE_SUCCESS) {\n    //if its editing an existing pawfile: \n    if (action.currentPetId) {\n      console.log('updating in reducer with pawfile', action.pawfile);\n      var updatedPawfile = action.pawfile;\n      var newArrayOfPawfiles = state.pawfiles.map(function (item) {\n        return item.id == action.currentPetId ? updatedPawfile : item;\n      });\n      return Object.assign({}, state, {\n        pawfiles: newArrayOfPawfiles,\n        // individualPawfile: action.pawfile,\n        pawfilesPending: false\n      });\n    } //if its a new obj\n\n\n    console.log('POST in reducer with pawfile', action.pawfile);\n    return Object.assign({}, state, {\n      pawfiles: [].concat(_toConsumableArray(state.pawfiles), [action.pawfile]),\n      pawfilesPending: false\n    });\n  } else if (action.type === DELETE_PAWFILE_REQUEST) {\n    return Object.assign({}, state, {\n      pawfilesPending: true\n    });\n  } else if (action.type === DELETE_PAWFILE_SUCCESS) {\n    console.log('in deleting success reducer');\n\n    var _newArrayOfPawfiles = state.pawfiles.filter(function (pawfile) {\n      return pawfile.id !== action.currentPetId;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles,\n      pawfilesPending: false\n    });\n  } // FOR REMINDER: \n  else if (action.type === SUBMIT_REMINDER_REQUEST) {\n      return Object.assign({}, state, {\n        pawfilesPending: true\n      });\n    } else if (action.type === CRUD_ERROR) {\n      return Object.assign({}, state, {\n        pawfilesPending: false,\n        error: true\n      });\n    } //not getting back a single reminder, but the whole pawfile. fix.\n    else if (action.type === SUBMIT_REMINDER_SUCCESS) {\n        var _updatedPawfile = action.pawfile;\n\n        var _newArrayOfPawfiles2 = state.pawfiles.map(function (item) {\n          return item.id == action.currentPetId ? _updatedPawfile : item;\n        });\n\n        console.log('in reminder reducer, new array of apwfiles is', _newArrayOfPawfiles2);\n        return Object.assign({}, state, {\n          pawfilesPending: false,\n          pawfiles: _newArrayOfPawfiles2\n        });\n      } else if (action.type === DELETE_REMINDER_REQUEST) {\n        return Object.assign({}, state, {\n          pawfilesPending: true\n        });\n      } else if (action.type === DELETE_REMINDER_SUCCESS) {\n        var pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n          return pawfile.id == action.currentPetId;\n        }));\n\n        var updatedReminders = pawfileToUpdate.reminders.filter(function (reminder) {\n          return reminder.id !== action.reminderId;\n        });\n        pawfileToUpdate.reminders = updatedReminders;\n\n        var _newArrayOfPawfiles3 = state.pawfiles.map(function (item) {\n          return item.id == action.currentPetId ? pawfileToUpdate : item;\n        });\n\n        return Object.assign({}, state, {\n          pawfiles: _newArrayOfPawfiles3,\n          pawfilesPending: false\n        });\n      }\n      /* FOR POSTS */\n      else if (action.type === SUBMIT_POST_REQUEST) {\n          return Object.assign({}, state, {\n            pawfilesPending: true\n          });\n        } else if (action.type === CRUD_ERROR) {\n          return Object.assign({}, state, {\n            pawfilesPending: false,\n            error: true\n          });\n        } //not getting back a single post, but the whole pawfile.\n        else if (action.type === SUBMIT_POST_SUCCESS) {\n            var _updatedPawfile2 = action.pawfile;\n\n            var _newArrayOfPawfiles4 = state.pawfiles.map(function (item) {\n              return item.id == action.currentPetId ? _updatedPawfile2 : item;\n            });\n\n            return Object.assign({}, state, {\n              pawfilesPending: false,\n              pawfiles: _newArrayOfPawfiles4\n            });\n          } // else if(action.type===SUBMIT_MEDICAL_FORM){\n  //   let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n  //   //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n  //   let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n  //   if(previousPosts){\n  //     pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n  //   }\n  //   else{\n  //     pawfileToUpdate.posts = [action.values];\n  //   }\n  //   //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n  //   if(action.values.vaccinations)\n  //   {\n  //     let vaccinationList = action.values.vaccinations.map(vaccination=>{\n  //       return {name: vaccination, date: action.values.date}\n  //     })\n  //     let previousVaccinations = pawfileToUpdate.vaccinations  ? [...pawfileToUpdate.vaccinations ] : '';\n  //     if(previousVaccinations){\n  //       pawfileToUpdate.vaccinations = [...pawfileToUpdate.vaccinations, ...vaccinationList];      \n  //     }\n  //     else{\n  //       pawfileToUpdate.vaccinations = [...vaccinationList];\n  //     }\n  //   }\n  //   if(action.values.prescriptions)\n  //   {\n  //     let prescriptionList = action.values.prescriptions.map(prescription=>{\n  //       return {name: prescription, date: action.values.date}\n  //     })\n  //     let previousPrescriptions = pawfileToUpdate.prescriptions  ? [...pawfileToUpdate.prescriptions ] : '';\n  //     if(previousPrescriptions){\n  //       pawfileToUpdate.prescriptions = [...pawfileToUpdate.prescriptions, ...prescriptionList];\n  //     }\n  //     else{\n  //       pawfileToUpdate.prescriptions = [...prescriptionList];\n  //     }\n  //   }\n  //   const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n  //   return Object.assign({}, state, {\n  //     pawfiles: newArrayOfPawfiles\n  //   })\n  // }\n  // else if(action.type===SUBMIT_MEMORY_FORM){\n  //   let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n  //   let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n  //   if(previousPosts){\n  //     pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n  //   }\n  //   else{\n  //     pawfileToUpdate.posts = [action.values];\n  //   }\n  //   const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n  //   return Object.assign({}, state, {\n  //     pawfiles: newArrayOfPawfiles\n  //   })\n  // }\n\n\n  return state;\n}; //load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display.","map":{"version":3,"sources":["/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/reducers/pawfile-reducer.js"],"names":["SHOW_PAWFILE_FORM","CHANGE_SORTING_PETS_METHOD","TOGGLE_NAVBAR","CHANGE_CURRENT_PET_ID","SHOW_MEDICAL_FORM","SUBMIT_MEDICAL_FORM","SHOW_MEMORY_FORM","SUBMIT_MEMORY_FORM","CHANGE_SEARCH_TERM","CHANGE_CATEGORY_FILTER","FETCH_PAWFILES_SUCCESS","FETCH_INDIVIDUAL_PAWFILE_SUCCESS","CHANGE_PAWFILES_PENDING","CHANGE_INDIVIDUAL_PAWFILE_PENDING","FETCH_INDIVIDUAL_PAWFILE_REQUEST","FETCH_INDIVIDUAL_PAWFILE_ERROR","CHANGE_ERROR","SUBMIT_PAWFILE_REQUEST","SUBMIT_PAWFILE_SUCCESS","DELETE_PAWFILE_REQUEST","DELETE_PAWFILE_SUCCESS","SUBMIT_REMINDER_REQUEST","SUBMIT_REMINDER_SUCCESS","CRUD_ERROR","DELETE_REMINDER_REQUEST","DELETE_REMINDER_SUCCESS","SUBMIT_POST_REQUEST","SUBMIT_POST_SUCCESS","initialState","user","firstName","lastName","sortingPetsMethod","showPawfileForm","showMedicalForm","showMemoryForm","currentPetId","undefined","currentSearchTerm","categoryFilter","toggleNavbar","pawfiles","individualPawfile","pawfilesPending","individualPawfilePending","error","pawfileReducer","state","action","type","Object","assign","bool","sortMethod","console","log","searchTerm","pawfile","updatedPawfile","newArrayOfPawfiles","map","item","id","filter","pawfileToUpdate","find","updatedReminders","reminders","reminder","reminderId"],"mappings":"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","sourcesContent":["import {SHOW_PAWFILE_FORM, CHANGE_SORTING_PETS_METHOD, TOGGLE_NAVBAR, CHANGE_CURRENT_PET_ID, SHOW_MEDICAL_FORM, SUBMIT_MEDICAL_FORM, SHOW_MEMORY_FORM, SUBMIT_MEMORY_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER,} from '../actions/index';\n\nimport {FETCH_PAWFILES_SUCCESS, FETCH_INDIVIDUAL_PAWFILE_SUCCESS, CHANGE_PAWFILES_PENDING, CHANGE_INDIVIDUAL_PAWFILE_PENDING, FETCH_INDIVIDUAL_PAWFILE_REQUEST, FETCH_INDIVIDUAL_PAWFILE_ERROR, CHANGE_ERROR, SUBMIT_PAWFILE_REQUEST, SUBMIT_PAWFILE_SUCCESS, DELETE_PAWFILE_REQUEST, DELETE_PAWFILE_SUCCESS} from '../actions/pawfile-crud'\n\nimport {SUBMIT_REMINDER_REQUEST, SUBMIT_REMINDER_SUCCESS, CRUD_ERROR, DELETE_REMINDER_REQUEST, DELETE_REMINDER_SUCCESS} from '../actions/reminder-crud'\n\nimport {SUBMIT_POST_REQUEST, SUBMIT_POST_SUCCESS} from '../actions/post-crud'\n\n\n//dummy initial state \nconst initialState = {\n  user: {firstName: 'Nikkie', lastName: 'Mashian'},\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  currentPetId: undefined,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar:false,\n  pawfiles: [],\n  individualPawfile: {},\n  pawfilesPending: true,\n  individualPawfilePending: true,\n  error:\"\"\n};\n\nexport const pawfileReducer = (state = initialState, action)=> {\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile. Need to set the currentPetId to either the id of the pet being edited, or undefined if it's a new pet/closing form\n  if(action.type=== SHOW_PAWFILE_FORM){\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPetId: action.currentPetId\n    })\n  }\n\n  else if (action.type=== CHANGE_SORTING_PETS_METHOD){\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod,\n    })\n  }\n\n  else if (action.type===TOGGLE_NAVBAR){\n    if(action.bool===true || action.bool===false){\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool,\n      })\n    }\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar,\n    })\n  }\n\n  else if(action.type===CHANGE_CURRENT_PET_ID){\n    console.log('changing id', action.currentPetId);\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    })\n  }\n\n  else if(action.type===SHOW_MEDICAL_FORM){\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool\n    })\n  }\n\n  else if(action.type===SHOW_MEMORY_FORM){\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool\n    })\n  }\n\n  else if(action.type===CHANGE_SEARCH_TERM){\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm,\n    })\n  }\n\n  else if(action.type===CHANGE_CATEGORY_FILTER){\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter,\n    })\n  }\n\n  else if(action.type===CHANGE_ERROR){\n    return Object.assign({}, state, {\n      error: action.bool,\n    })\n  }\n\n  else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('successfully fetching all pawfiles', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_SUCCESS){\n    console.log('in success for indiv pawfile, fetched', action.pawfile);\n    return Object.assign({}, state, {\n      individualPawfile: action.pawfile,\n      individualPawfilePending: false,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      individualPawfilePending: true,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_ERROR){\n    console.log('in error of fetching');\n    return Object.assign({}, state, {\n      individualPawfilePending: false,\n      error: true,\n    })\n  }\n\n  else if(action.type===CHANGE_PAWFILES_PENDING){\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool,\n    })\n  }\n\n  else if(action.type===  CHANGE_INDIVIDUAL_PAWFILE_PENDING){\n    return Object.assign({}, state, {\n      individualPawfilePending: action.bool,\n    })\n  }\n\n  else if (action.type===SUBMIT_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type===SUBMIT_PAWFILE_SUCCESS){\n    //if its editing an existing pawfile: \n    if(action.currentPetId){\n      console.log('updating in reducer with pawfile', action.pawfile);\n      const updatedPawfile = action.pawfile;\n\n      const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n  \n      return Object.assign({}, state, {\n          pawfiles: newArrayOfPawfiles,\n          // individualPawfile: action.pawfile,\n          pawfilesPending: false,\n      })\n    }\n\n    //if its a new obj\n    console.log('POST in reducer with pawfile', action.pawfile);\n    return Object.assign({}, state, {\n      pawfiles: [\n        ...state.pawfiles,\n        action.pawfile\n      ],\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===DELETE_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type===DELETE_PAWFILE_SUCCESS){\n    console.log('in deleting success reducer')\n    const newArrayOfPawfiles = state.pawfiles.filter((pawfile)=> (pawfile.id!==action.currentPetId));\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  // FOR REMINDER: \n  else if (action.type===SUBMIT_REMINDER_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if (action.type===CRUD_ERROR){\n    return Object.assign({}, state, {\n      pawfilesPending: false,\n      error: true,\n    })\n  }\n\n  //not getting back a single reminder, but the whole pawfile. fix.\n  else if (action.type=== SUBMIT_REMINDER_SUCCESS){\n    const updatedPawfile = action.pawfile;\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n\n    console.log('in reminder reducer, new array of apwfiles is', newArrayOfPawfiles);\n    return Object.assign({}, state, {\n        pawfilesPending: false,\n        pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if (action.type===DELETE_REMINDER_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n\n  else if(action.type=== DELETE_REMINDER_SUCCESS){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    const updatedReminders = pawfileToUpdate.reminders.filter((reminder)=> (reminder.id!==action.reminderId));\n\n    pawfileToUpdate.reminders=updatedReminders;\n\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  /* FOR POSTS */\n  else if (action.type===SUBMIT_POST_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if (action.type===CRUD_ERROR){\n    return Object.assign({}, state, {\n      pawfilesPending: false,\n      error: true,\n    })\n  }\n\n  //not getting back a single post, but the whole pawfile.\n  else if (action.type=== SUBMIT_POST_SUCCESS){\n    const updatedPawfile = action.pawfile;\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n\n    return Object.assign({}, state, {\n        pawfilesPending: false,\n        pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  // else if(action.type===SUBMIT_MEDICAL_FORM){\n  //   let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n  //   //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n  //   let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n  //   if(previousPosts){\n  //     pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n  //   }\n  //   else{\n  //     pawfileToUpdate.posts = [action.values];\n  //   }\n\n  //   //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n  //   if(action.values.vaccinations)\n  //   {\n  //     let vaccinationList = action.values.vaccinations.map(vaccination=>{\n  //       return {name: vaccination, date: action.values.date}\n  //     })\n\n  //     let previousVaccinations = pawfileToUpdate.vaccinations  ? [...pawfileToUpdate.vaccinations ] : '';\n\n  //     if(previousVaccinations){\n  //       pawfileToUpdate.vaccinations = [...pawfileToUpdate.vaccinations, ...vaccinationList];      \n  //     }\n  //     else{\n  //       pawfileToUpdate.vaccinations = [...vaccinationList];\n  //     }\n  //   }\n\n  //   if(action.values.prescriptions)\n  //   {\n  //     let prescriptionList = action.values.prescriptions.map(prescription=>{\n  //       return {name: prescription, date: action.values.date}\n  //     })\n\n  //     let previousPrescriptions = pawfileToUpdate.prescriptions  ? [...pawfileToUpdate.prescriptions ] : '';\n\n  //     if(previousPrescriptions){\n  //       pawfileToUpdate.prescriptions = [...pawfileToUpdate.prescriptions, ...prescriptionList];\n     \n  //     }\n  //     else{\n  //       pawfileToUpdate.prescriptions = [...prescriptionList];\n  //     }\n  //   }\n\n  //   const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n  //   return Object.assign({}, state, {\n  //     pawfiles: newArrayOfPawfiles\n  //   })\n  // }\n\n  // else if(action.type===SUBMIT_MEMORY_FORM){\n  //   let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n  //   let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n  //   if(previousPosts){\n  //     pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n  //   }\n  //   else{\n  //     pawfileToUpdate.posts = [action.values];\n  //   }\n\n  //   const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n  //   return Object.assign({}, state, {\n  //     pawfiles: newArrayOfPawfiles\n  //   })\n  // }\n\n  return state;\n}\n\n\n//load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display. \n"]},"metadata":{},"sourceType":"module"}