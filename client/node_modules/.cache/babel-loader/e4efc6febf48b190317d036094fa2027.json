{"ast":null,"code":"import _classCallCheck from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/components/pawfile/medical-form.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, Field, Fieldset, SubmissionError, focus } from 'redux-form';\nimport Input from '../input';\nimport { submitMedicalForm, showMedicalForm } from '../../actions/index';\nimport { required, nonEmpty, unSelected } from '../validators';\nimport { stringToArrayList, formatDate } from '../helper-functions';\nimport '.././home/pawfile-form.css';\nexport var MedicalForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MedicalForm, _React$Component);\n\n  function MedicalForm() {\n    _classCallCheck(this, MedicalForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MedicalForm).apply(this, arguments));\n  }\n\n  _createClass(MedicalForm, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.dispatch(showMedicalForm(false));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      values.type = \"medical\";\n      values.date = formatDate(values.date).toDateString();\n\n      if (values.vaccinations) {\n        values.vaccinations = stringToArrayList(values.vaccinations);\n      }\n\n      if (values.prescriptions) {\n        values.prescriptions = stringToArrayList(values.prescriptions);\n      }\n\n      if (values.symptoms) {\n        values.symptoms = stringToArrayList(values.symptoms);\n      }\n\n      console.log('values are', values);\n      this.props.dispatch(submitMedicalForm(values, this.props.currentPetId));\n      this.props.dispatch(showMedicalForm(false));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      console.log('showing med');\n      return React.createElement(\"div\", {\n        className: \"form-modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"form\",\n        onSubmit: this.props.handleSubmit(function (values) {\n          return _this.onSubmit(values);\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"close\",\n        onClick: function onClick() {\n          return _this.props.dispatch(showMedicalForm(false));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Medical Form\"), React.createElement(Field, {\n        component: Input,\n        label: \"Title:\",\n        type: \"text\",\n        name: \"title\",\n        id: \"title\",\n        validate: [required, nonEmpty],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(Field, {\n        component: Input,\n        label: \"Date:\",\n        name: \"date\",\n        id: \"date\",\n        type: \"date\",\n        validate: [required, nonEmpty],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Field, {\n        component: Input,\n        label: \"Doctor:\",\n        name: \"doctor\",\n        id: \"doctor\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Field, {\n        component: Input,\n        label: \"Doctor's Office:\",\n        name: \"office\",\n        id: \"office\",\n        type: \"url\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Field, {\n        component: Input,\n        label: \"Symptoms:\",\n        element: \"textarea\",\n        name: \"symptoms\",\n        id: \"symptoms\",\n        \"aria-describedby\": \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Please type the symptoms (if any) as a comma-seperated list.\"), React.createElement(Field, {\n        component: Input,\n        label: \"Prescriptions:\",\n        element: \"textarea\",\n        name: \"prescriptions\",\n        id: \"prescriptions\",\n        \"aria-describedby\": \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Please type the prescriptions (if any) as a comma-seperated list.\"), React.createElement(Field, {\n        component: Input,\n        label: \"Vaccinations:\",\n        element: \"textarea\",\n        name: \"vaccinations\",\n        id: \"vaccinations\",\n        \"aria-describedby\": \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Please type the vaccinations (if any) as a comma-seperated list.\"), React.createElement(Field, {\n        component: Input,\n        label: \"Notes:\",\n        element: \"textarea\",\n        name: \"notes\",\n        id: \"notes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Save\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.props.dispatch(showMedicalForm(false));\n        },\n        type: \"cancel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Cancel\"))));\n    }\n  }]);\n\n  return MedicalForm;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  var currentPetId = state.pawfile.currentPetId;\n  return {\n    // to get the initial values if the user is editing the form: \n    currentPetId: state.pawfile.currentPetId // initialValues: {\n    //   name: currentPetId>=0 ? state.pawfile.pawfiles[currentPetId].name : \"\",\n    // }\n\n  };\n}\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: 'MedicalForm'\n})(MedicalForm));","map":{"version":3,"sources":["/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/components/pawfile/medical-form.js"],"names":["React","connect","reduxForm","Field","Fieldset","SubmissionError","focus","Input","submitMedicalForm","showMedicalForm","required","nonEmpty","unSelected","stringToArrayList","formatDate","MedicalForm","props","dispatch","values","type","date","toDateString","vaccinations","prescriptions","symptoms","console","log","currentPetId","handleSubmit","onSubmit","Component","mapStateToProps","state","pawfile","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {reduxForm, Field, Fieldset, SubmissionError, focus} from 'redux-form';\nimport Input from '../input';\nimport {submitMedicalForm, showMedicalForm} from '../../actions/index';\nimport {required, nonEmpty, unSelected} from '../validators';\nimport {stringToArrayList, formatDate} from '../helper-functions';\nimport '.././home/pawfile-form.css';\n\nexport class MedicalForm extends React.Component{\n  componentWillUnmount(){\n    this.props.dispatch(showMedicalForm(false));\n  }\n\n  onSubmit(values){\n    values.type=\"medical\";\n    values.date = formatDate(values.date).toDateString();\n    if(values.vaccinations){\n      values.vaccinations = stringToArrayList(values.vaccinations);\n    }\n    if(values.prescriptions){\n      values.prescriptions = stringToArrayList(values.prescriptions);\n    }\n    if(values.symptoms){\n      values.symptoms = stringToArrayList(values.symptoms);\n    }\n\n    console.log('values are', values);\n    this.props.dispatch(submitMedicalForm(values, this.props.currentPetId));\n    this.props.dispatch(showMedicalForm(false));\n  }\n\n  render(){\n    console.log('showing med')\n    return(\n      <div className='form-modal'>\n          <form className=\"form\" onSubmit={this.props.handleSubmit(values => this.onSubmit(values))}>\n          <button type=\"button\" className = \"close\" onClick={()=>this.props.dispatch(showMedicalForm(false))}>X</button>\n          <h2>Medical Form</h2>\n\n            <Field\n              component={Input}\n              label=\"Title:\" \n              type=\"text\" \n              name=\"title\" \n              id=\"title\"\n              validate={[required, nonEmpty]}\n            /> \n\n            <Field\n              component={Input} \n              label = \"Date:\"\n              name=\"date\" \n              id=\"date\"\n              type = \"date\"\n              validate={[required, nonEmpty]}\n            />\n\n            <Field\n              component={Input} \n              label = \"Doctor:\"\n              name=\"doctor\" \n              id=\"doctor\"\n              type = \"text\"\n            />\n\n            <Field\n              component={Input} \n              label = \"Doctor's Office:\"\n              name=\"office\" \n              id=\"office\"\n              type = \"url\"\n            />\n\n            <Field\n              component={Input}\n              label=\"Symptoms:\" \n              element=\"textarea\"\n              name=\"symptoms\" \n              id=\"symptoms\"\n              aria-describedby=\"instructions\"\n            /> \n            <div id=\"instructions\">\n                Please type the symptoms (if any) as a comma-seperated list.\n            </div>\n\n            <Field\n              component={Input}\n              label=\"Prescriptions:\" \n              element=\"textarea\"\n              name=\"prescriptions\" \n              id=\"prescriptions\"\n              aria-describedby=\"instructions\"\n            /> \n            <div id=\"instructions\">\n                Please type the prescriptions (if any) as a comma-seperated list.\n            </div>\n\n            <Field\n              component={Input}\n              label=\"Vaccinations:\" \n              element=\"textarea\"\n              name=\"vaccinations\" \n              id=\"vaccinations\"\n              aria-describedby=\"instructions\"\n            /> \n            <div id=\"instructions\">\n                Please type the vaccinations (if any) as a comma-seperated list.\n            </div>\n\n            <Field\n              component={Input}\n              label=\"Notes:\" \n              element=\"textarea\"\n              name=\"notes\" \n              id=\"notes\"\n            /> \n            \n            <div className=\"buttons\">\n              <button type=\"submit\">Save</button>\n              <button onClick={()=>this.props.dispatch(showMedicalForm(false))} type=\"cancel\">Cancel</button>\n            </div>\n          </form>\n        </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  let currentPetId = state.pawfile.currentPetId;\n  return {\n    // to get the initial values if the user is editing the form: \n    currentPetId: state.pawfile.currentPetId,\n    // initialValues: {\n    //   name: currentPetId>=0 ? state.pawfile.pawfiles[currentPetId].name : \"\",\n    // }\n  }\n}\n\nexport default connect(mapStateToProps)(reduxForm({\n  form:'MedicalForm',\n})(MedicalForm));"]},"metadata":{},"sourceType":"module"}