{"ast":null,"code":"import _toConsumableArray from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SHOW_PAWFILE_FORM, SUBMIT_PAWFILE, CHANGE_SORTING_PETS_METHOD, ADDING_NEW_REMINDER, DELETE_PAWFILE, TOGGLE_NAVBAR, DELETE_REMINDER, CHANGE_CURRENT_PET_ID, SHOW_MEDICAL_FORM, SUBMIT_MEDICAL_FORM, SHOW_MEMORY_FORM, SUBMIT_MEMORY_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER, FETCH_PAWFILES_SUCCESS, FETCH_INDIVIDUAL_PAWFILE_SUCCESS, CHANGE_PAWFILES_PENDING, CHANGE_INDIVIDUAL_PAWFILE_PENDING } from '../actions/index'; //dummy initial state \n\nvar initialState = {\n  user: {\n    firstName: 'Nikkie',\n    lastName: 'Mashian'\n  },\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  currentPetId: undefined,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar: false,\n  pawfiles: [],\n  individualPawfile: {},\n  pawfilesPending: true,\n  individualPawfilePending: true\n};\nexport var pawfileReducer = function pawfileReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile. Need to set the currentPetId to either the id of the pet being edited, or undefined if it's a new pet/closing form\n  if (action.type === SHOW_PAWFILE_FORM) {\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === SUBMIT_PAWFILE) {\n    //if its editing an existing pawfile: \n    if (action.currentPetId >= 0) {\n      var updatedValues = action.values;\n\n      var pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n        return pawfile.id == action.currentPetId;\n      })); //merge updated values with rest of pawfile: \n\n\n      var updatedPawfile = Object.assign({}, pawfileToUpdate, updatedValues);\n      var newArrayOfPawfiles = state.pawfiles.map(function (item) {\n        return item.id == action.currentPetId ? updatedPawfile : item;\n      });\n      return Object.assign({}, state, {\n        pawfiles: newArrayOfPawfiles\n      });\n    } //if its a new pawfile: \n\n\n    return Object.assign({}, state, {\n      pawfiles: [].concat(_toConsumableArray(state.pawfiles), [action.values])\n    });\n  } else if (action.type === SUBMIT_MEDICAL_FORM) {\n    var _pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n      return pawfile.id == action.currentPetId;\n    })); //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n\n\n    var previousPosts = _pawfileToUpdate.posts ? _toConsumableArray(_pawfileToUpdate.posts) : '';\n\n    if (previousPosts) {\n      _pawfileToUpdate.posts = [].concat(_toConsumableArray(_pawfileToUpdate.posts), [action.values]);\n    } else {\n      _pawfileToUpdate.posts = [action.values];\n    } //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n\n\n    if (action.values.vaccinations) {\n      var vaccinationList = action.values.vaccinations.map(function (vaccination) {\n        return {\n          name: vaccination,\n          date: action.values.date\n        };\n      });\n      var previousVaccinations = _pawfileToUpdate.vaccinations ? _toConsumableArray(_pawfileToUpdate.vaccinations) : '';\n\n      if (previousVaccinations) {\n        _pawfileToUpdate.vaccinations = [].concat(_toConsumableArray(_pawfileToUpdate.vaccinations), _toConsumableArray(vaccinationList));\n      } else {\n        _pawfileToUpdate.vaccinations = _toConsumableArray(vaccinationList);\n      }\n    }\n\n    if (action.values.prescriptions) {\n      var prescriptionList = action.values.prescriptions.map(function (prescription) {\n        return {\n          name: prescription,\n          date: action.values.date\n        };\n      });\n      var previousPrescriptions = _pawfileToUpdate.prescriptions ? _toConsumableArray(_pawfileToUpdate.prescriptions) : '';\n\n      if (previousPrescriptions) {\n        _pawfileToUpdate.prescriptions = [].concat(_toConsumableArray(_pawfileToUpdate.prescriptions), _toConsumableArray(prescriptionList));\n      } else {\n        _pawfileToUpdate.prescriptions = _toConsumableArray(prescriptionList);\n      }\n    }\n\n    var _newArrayOfPawfiles = state.pawfiles.map(function (item) {\n      return item.id == action.currentPetId ? _pawfileToUpdate : item;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles\n    });\n  } else if (action.type === SUBMIT_MEMORY_FORM) {\n    var _pawfileToUpdate2 = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n      return pawfile.id == action.currentPetId;\n    }));\n\n    var _previousPosts = _pawfileToUpdate2.posts ? _toConsumableArray(_pawfileToUpdate2.posts) : '';\n\n    if (_previousPosts) {\n      _pawfileToUpdate2.posts = [].concat(_toConsumableArray(_pawfileToUpdate2.posts), [action.values]);\n    } else {\n      _pawfileToUpdate2.posts = [action.values];\n    }\n\n    var _newArrayOfPawfiles2 = state.pawfiles.map(function (item) {\n      return item.id == action.currentPetId ? _pawfileToUpdate2 : item;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles2\n    });\n  } else if (action.type === DELETE_PAWFILE) {\n    var _newArrayOfPawfiles3 = state.pawfiles.filter(function (item) {\n      return item.id !== action.currentPetId;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles3\n    });\n  } else if (action.type === ADDING_NEW_REMINDER) {\n    var newReminder = action.values; //create a new obj -this was the problem (I was directly mutating state)\n\n    var _pawfileToUpdate3 = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n      return pawfile.id == action.currentPetId;\n    }));\n\n    var previousReminders = _pawfileToUpdate3.reminders ? _toConsumableArray(_pawfileToUpdate3.reminders) : ''; //\n\n    if (previousReminders) {\n      _pawfileToUpdate3.reminders = [].concat(_toConsumableArray(_pawfileToUpdate3.reminders), [newReminder]);\n    } else {\n      _pawfileToUpdate3.reminders = [newReminder];\n    }\n\n    var _newArrayOfPawfiles4 = state.pawfiles.map(function (item) {\n      return item.id == action.currentPetId ? _pawfileToUpdate3 : item;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles4\n    });\n  } else if (action.type === DELETE_REMINDER) {\n    var _pawfileToUpdate4 = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n      return pawfile.id == action.currentPetId;\n    }));\n\n    var updatedReminders = _pawfileToUpdate4.reminders.filter(function (reminder) {\n      return reminder.id !== action.reminderId;\n    });\n\n    _pawfileToUpdate4.reminders = updatedReminders; // const updatedPawfile = Object.assign({}, state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId), {\n    //   pawfileToUpdate\n    // })\n\n    var _newArrayOfPawfiles5 = state.pawfiles.map(function (item) {\n      return item.id == action.currentPetId ? _pawfileToUpdate4 : item;\n    });\n\n    console.log('newArrayOfPawfiles is', _newArrayOfPawfiles5);\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles5\n    });\n  } else if (action.type === CHANGE_SORTING_PETS_METHOD) {\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod\n    });\n  } else if (action.type === TOGGLE_NAVBAR) {\n    if (action.bool === true || action.bool === false) {\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool\n      });\n    }\n\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar\n    });\n  } else if (action.type === CHANGE_CURRENT_PET_ID) {\n    console.log('changing id', action.currentPetId);\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === SHOW_MEDICAL_FORM) {\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool\n    });\n  } else if (action.type === SHOW_MEMORY_FORM) {\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool\n    });\n  } else if (action.type === CHANGE_SEARCH_TERM) {\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm\n    });\n  } else if (action.type === CHANGE_CATEGORY_FILTER) {\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter\n    });\n  } else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('in success, fetched', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles.pawfiles,\n      pawfilesPending: false\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_SUCCESS) {\n    console.log('in success for indiv pawfile, fetched', action.pawfile.pawfile);\n    return Object.assign({}, state, {\n      individualPawfile: action.pawfile.pawfile,\n      individualPawfilePending: false\n    });\n  } else if (action.type === CHANGE_PAWFILES_PENDING) {\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool\n    });\n  } else if (action.type === CHANGE_INDIVIDUAL_PAWFILE_PENDING) {\n    return Object.assign({}, state, {\n      individualPawfilePending: action.bool\n    });\n  }\n\n  return state;\n}; //load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display.","map":{"version":3,"sources":["/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/reducers/pawfile-reducer.js"],"names":["SHOW_PAWFILE_FORM","SUBMIT_PAWFILE","CHANGE_SORTING_PETS_METHOD","ADDING_NEW_REMINDER","DELETE_PAWFILE","TOGGLE_NAVBAR","DELETE_REMINDER","CHANGE_CURRENT_PET_ID","SHOW_MEDICAL_FORM","SUBMIT_MEDICAL_FORM","SHOW_MEMORY_FORM","SUBMIT_MEMORY_FORM","CHANGE_SEARCH_TERM","CHANGE_CATEGORY_FILTER","FETCH_PAWFILES_SUCCESS","FETCH_INDIVIDUAL_PAWFILE_SUCCESS","CHANGE_PAWFILES_PENDING","CHANGE_INDIVIDUAL_PAWFILE_PENDING","initialState","user","firstName","lastName","sortingPetsMethod","showPawfileForm","showMedicalForm","showMemoryForm","currentPetId","undefined","currentSearchTerm","categoryFilter","toggleNavbar","pawfiles","individualPawfile","pawfilesPending","individualPawfilePending","pawfileReducer","state","action","type","Object","assign","bool","updatedValues","values","pawfileToUpdate","find","pawfile","id","updatedPawfile","newArrayOfPawfiles","map","item","previousPosts","posts","vaccinations","vaccinationList","vaccination","name","date","previousVaccinations","prescriptions","prescriptionList","prescription","previousPrescriptions","filter","newReminder","previousReminders","reminders","updatedReminders","reminder","reminderId","console","log","sortMethod","searchTerm"],"mappings":"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","sourcesContent":["import {SHOW_PAWFILE_FORM, SUBMIT_PAWFILE, CHANGE_SORTING_PETS_METHOD, ADDING_NEW_REMINDER, DELETE_PAWFILE, TOGGLE_NAVBAR, DELETE_REMINDER, CHANGE_CURRENT_PET_ID, SHOW_MEDICAL_FORM, SUBMIT_MEDICAL_FORM, SHOW_MEMORY_FORM, SUBMIT_MEMORY_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER, FETCH_PAWFILES_SUCCESS, FETCH_INDIVIDUAL_PAWFILE_SUCCESS, CHANGE_PAWFILES_PENDING, CHANGE_INDIVIDUAL_PAWFILE_PENDING} from '../actions/index';\n\n//dummy initial state \nconst initialState = {\n  user: {firstName: 'Nikkie', lastName: 'Mashian'},\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  currentPetId: undefined,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar:false,\n  pawfiles: [],\n  individualPawfile: {},\n  pawfilesPending: true,\n  individualPawfilePending: true,\n};\n\nexport const pawfileReducer = (state = initialState, action)=> {\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile. Need to set the currentPetId to either the id of the pet being edited, or undefined if it's a new pet/closing form\n  if(action.type=== SHOW_PAWFILE_FORM){\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPetId: action.currentPetId\n    })\n  }\n\n  else if (action.type=== SUBMIT_PAWFILE){\n    //if its editing an existing pawfile: \n    if(action.currentPetId>=0){\n      const updatedValues = action.values;\n      let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n      //merge updated values with rest of pawfile: \n      let updatedPawfile = Object.assign({}, pawfileToUpdate, updatedValues)\n\n      const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n  \n      return Object.assign({}, state, {\n          pawfiles: newArrayOfPawfiles\n      })\n    }\n    //if its a new pawfile: \n    return Object.assign({}, state, {\n      pawfiles: [\n        ...state.pawfiles,\n        action.values\n      ],\n    })\n  }\n\n  else if(action.type===SUBMIT_MEDICAL_FORM){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n    let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n    if(previousPosts){\n      pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n    }\n    else{\n      pawfileToUpdate.posts = [action.values];\n    }\n\n    //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n    if(action.values.vaccinations)\n    {\n      let vaccinationList = action.values.vaccinations.map(vaccination=>{\n        return {name: vaccination, date: action.values.date}\n      })\n\n      let previousVaccinations = pawfileToUpdate.vaccinations  ? [...pawfileToUpdate.vaccinations ] : '';\n\n      if(previousVaccinations){\n        pawfileToUpdate.vaccinations = [...pawfileToUpdate.vaccinations, ...vaccinationList];      \n      }\n      else{\n        pawfileToUpdate.vaccinations = [...vaccinationList];\n      }\n    }\n\n    if(action.values.prescriptions)\n    {\n      let prescriptionList = action.values.prescriptions.map(prescription=>{\n        return {name: prescription, date: action.values.date}\n      })\n\n      let previousPrescriptions = pawfileToUpdate.prescriptions  ? [...pawfileToUpdate.prescriptions ] : '';\n\n      if(previousPrescriptions){\n        pawfileToUpdate.prescriptions = [...pawfileToUpdate.prescriptions, ...prescriptionList];\n     \n      }\n      else{\n        pawfileToUpdate.prescriptions = [...prescriptionList];\n      }\n    }\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if(action.type===SUBMIT_MEMORY_FORM){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n    if(previousPosts){\n      pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n    }\n    else{\n      pawfileToUpdate.posts = [action.values];\n    }\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if(action.type===DELETE_PAWFILE){\n    const newArrayOfPawfiles = state.pawfiles.filter((item)=> (item.id!==action.currentPetId));\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n    })\n  }\n\n  else if (action.type=== ADDING_NEW_REMINDER){\n    const newReminder = action.values;\n\n    //create a new obj -this was the problem (I was directly mutating state)\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    let previousReminders = pawfileToUpdate.reminders ? [...pawfileToUpdate.reminders] : '';\n\n    //\n    if(previousReminders){\n      pawfileToUpdate.reminders=[...pawfileToUpdate.reminders, newReminder];\n    }\n    else{\n      pawfileToUpdate.reminders=[newReminder];\n    }\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n        pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if(action.type=== DELETE_REMINDER){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    const updatedReminders = pawfileToUpdate.reminders.filter((reminder)=> (reminder.id!==action.reminderId));\n\n    pawfileToUpdate.reminders=updatedReminders;\n\n    // const updatedPawfile = Object.assign({}, state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId), {\n    //   pawfileToUpdate\n    // })\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    console.log('newArrayOfPawfiles is', newArrayOfPawfiles)\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if (action.type=== CHANGE_SORTING_PETS_METHOD){\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod,\n    })\n  }\n\n  else if (action.type===TOGGLE_NAVBAR){\n    if(action.bool===true || action.bool===false){\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool,\n      })\n    }\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar,\n    })\n  }\n\n  else if(action.type===CHANGE_CURRENT_PET_ID){\n    console.log('changing id', action.currentPetId);\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    })\n  }\n\n  else if(action.type===SHOW_MEDICAL_FORM){\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool\n    })\n  }\n\n  else if(action.type===SHOW_MEMORY_FORM){\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool\n    })\n  }\n\n  else if(action.type===CHANGE_SEARCH_TERM){\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm,\n    })\n  }\n\n  else if(action.type===CHANGE_CATEGORY_FILTER){\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter,\n    })\n  }\n\n  else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('in success, fetched', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles.pawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_SUCCESS){\n    console.log('in success for indiv pawfile, fetched', action.pawfile.pawfile);\n    return Object.assign({}, state, {\n      individualPawfile: action.pawfile.pawfile,\n      individualPawfilePending: false,\n    })\n  }\n\n  else if(action.type===CHANGE_PAWFILES_PENDING){\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool,\n    })\n  }\n\n  else if(action.type===  CHANGE_INDIVIDUAL_PAWFILE_PENDING){\n    return Object.assign({}, state, {\n      individualPawfilePending: action.bool,\n    })\n  }\n\n  return state;\n}\n\n//load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display. "]},"metadata":{},"sourceType":"module"}