{"ast":null,"code":"import _toConsumableArray from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SHOW_PAWFILE_FORM, CHANGE_SORTING_PETS_METHOD, ADDING_NEW_REMINDER, TOGGLE_NAVBAR, DELETE_REMINDER, CHANGE_CURRENT_PET_ID, SHOW_MEDICAL_FORM, SUBMIT_MEDICAL_FORM, SHOW_MEMORY_FORM, SUBMIT_MEMORY_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER } from '../actions/index';\nimport { FETCH_PAWFILES_SUCCESS, FETCH_INDIVIDUAL_PAWFILE_SUCCESS, CHANGE_PAWFILES_PENDING, CHANGE_INDIVIDUAL_PAWFILE_PENDING, FETCH_INDIVIDUAL_PAWFILE_REQUEST, FETCH_INDIVIDUAL_PAWFILE_ERROR, CHANGE_ERROR, SUBMIT_PAWFILE_REQUEST, SUBMIT_PAWFILE_SUCCESS, DELETE_PAWFILE_REQUEST, DELETE_PAWFILE_SUCCESS } from '../actions/pawfile-crud';\nimport { SUBMIT_REMINDER_REQUEST, SUBMIT_REMINDER_SUCCESS, CRUD_ERROR, DELETE_REMINDER_REQUEST, DELETE_REMINDER_SUCCESS } from '../actions/reminder-crud'; //dummy initial state \n\nvar initialState = {\n  user: {\n    firstName: 'Nikkie',\n    lastName: 'Mashian'\n  },\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  currentPetId: undefined,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar: false,\n  pawfiles: [],\n  individualPawfile: {},\n  pawfilesPending: true,\n  individualPawfilePending: true,\n  error: \"\"\n};\nexport var pawfileReducer = function pawfileReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile. Need to set the currentPetId to either the id of the pet being edited, or undefined if it's a new pet/closing form\n  if (action.type === SHOW_PAWFILE_FORM) {\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === SUBMIT_MEDICAL_FORM) {\n    var pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n      return pawfile.id == action.currentPetId;\n    })); //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n\n\n    var previousPosts = pawfileToUpdate.posts ? _toConsumableArray(pawfileToUpdate.posts) : '';\n\n    if (previousPosts) {\n      pawfileToUpdate.posts = [].concat(_toConsumableArray(pawfileToUpdate.posts), [action.values]);\n    } else {\n      pawfileToUpdate.posts = [action.values];\n    } //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n\n\n    if (action.values.vaccinations) {\n      var vaccinationList = action.values.vaccinations.map(function (vaccination) {\n        return {\n          name: vaccination,\n          date: action.values.date\n        };\n      });\n      var previousVaccinations = pawfileToUpdate.vaccinations ? _toConsumableArray(pawfileToUpdate.vaccinations) : '';\n\n      if (previousVaccinations) {\n        pawfileToUpdate.vaccinations = [].concat(_toConsumableArray(pawfileToUpdate.vaccinations), _toConsumableArray(vaccinationList));\n      } else {\n        pawfileToUpdate.vaccinations = _toConsumableArray(vaccinationList);\n      }\n    }\n\n    if (action.values.prescriptions) {\n      var prescriptionList = action.values.prescriptions.map(function (prescription) {\n        return {\n          name: prescription,\n          date: action.values.date\n        };\n      });\n      var previousPrescriptions = pawfileToUpdate.prescriptions ? _toConsumableArray(pawfileToUpdate.prescriptions) : '';\n\n      if (previousPrescriptions) {\n        pawfileToUpdate.prescriptions = [].concat(_toConsumableArray(pawfileToUpdate.prescriptions), _toConsumableArray(prescriptionList));\n      } else {\n        pawfileToUpdate.prescriptions = _toConsumableArray(prescriptionList);\n      }\n    }\n\n    var newArrayOfPawfiles = state.pawfiles.map(function (item) {\n      return item.id == action.currentPetId ? pawfileToUpdate : item;\n    });\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles\n    });\n  } else if (action.type === SUBMIT_MEMORY_FORM) {\n    var _pawfileToUpdate = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n      return pawfile.id == action.currentPetId;\n    }));\n\n    var _previousPosts = _pawfileToUpdate.posts ? _toConsumableArray(_pawfileToUpdate.posts) : '';\n\n    if (_previousPosts) {\n      _pawfileToUpdate.posts = [].concat(_toConsumableArray(_pawfileToUpdate.posts), [action.values]);\n    } else {\n      _pawfileToUpdate.posts = [action.values];\n    }\n\n    var _newArrayOfPawfiles = state.pawfiles.map(function (item) {\n      return item.id == action.currentPetId ? _pawfileToUpdate : item;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles\n    });\n  } else if (action.type === CHANGE_SORTING_PETS_METHOD) {\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod\n    });\n  } else if (action.type === TOGGLE_NAVBAR) {\n    if (action.bool === true || action.bool === false) {\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool\n      });\n    }\n\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar\n    });\n  } else if (action.type === CHANGE_CURRENT_PET_ID) {\n    console.log('changing id', action.currentPetId);\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    });\n  } else if (action.type === SHOW_MEDICAL_FORM) {\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool\n    });\n  } else if (action.type === SHOW_MEMORY_FORM) {\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool\n    });\n  } else if (action.type === CHANGE_SEARCH_TERM) {\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm\n    });\n  } else if (action.type === CHANGE_CATEGORY_FILTER) {\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter\n    });\n  } else if (action.type === CHANGE_ERROR) {\n    return Object.assign({}, state, {\n      error: action.bool\n    });\n  } else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('successfully fetching all pawfiles', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles,\n      pawfilesPending: false\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_SUCCESS) {\n    console.log('in success for indiv pawfile, fetched', action.pawfile);\n    return Object.assign({}, state, {\n      individualPawfile: action.pawfile,\n      individualPawfilePending: false\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_REQUEST) {\n    return Object.assign({}, state, {\n      individualPawfilePending: true\n    });\n  } else if (action.type === FETCH_INDIVIDUAL_PAWFILE_ERROR) {\n    console.log('in error of fetching');\n    return Object.assign({}, state, {\n      individualPawfilePending: false,\n      error: true\n    });\n  } else if (action.type === CHANGE_PAWFILES_PENDING) {\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool\n    });\n  } else if (action.type === CHANGE_INDIVIDUAL_PAWFILE_PENDING) {\n    return Object.assign({}, state, {\n      individualPawfilePending: action.bool\n    });\n  } else if (action.type === SUBMIT_PAWFILE_REQUEST) {\n    return Object.assign({}, state, {\n      pawfilesPending: true\n    });\n  } else if (action.type === SUBMIT_PAWFILE_SUCCESS) {\n    //if its editing an existing pawfile: \n    if (action.currentPetId) {\n      console.log('updating in reducer with pawfile', action.pawfile);\n      var updatedPawfile = action.pawfile;\n\n      var _newArrayOfPawfiles2 = state.pawfiles.map(function (item) {\n        return item.id == action.currentPetId ? updatedPawfile : item;\n      });\n\n      return Object.assign({}, state, {\n        pawfiles: _newArrayOfPawfiles2,\n        // individualPawfile: action.pawfile,\n        pawfilesPending: false\n      });\n    } //if its a new obj\n\n\n    console.log('POST in reducer with pawfile', action.pawfile);\n    return Object.assign({}, state, {\n      pawfiles: [].concat(_toConsumableArray(state.pawfiles), [action.pawfile]),\n      pawfilesPending: false\n    });\n  } else if (action.type === DELETE_PAWFILE_REQUEST) {\n    return Object.assign({}, state, {\n      pawfilesPending: true\n    });\n  } else if (action.type === DELETE_PAWFILE_SUCCESS) {\n    console.log('in deleting success reducer');\n\n    var _newArrayOfPawfiles3 = state.pawfiles.filter(function (pawfile) {\n      return pawfile.id !== action.currentPetId;\n    });\n\n    return Object.assign({}, state, {\n      pawfiles: _newArrayOfPawfiles3,\n      pawfilesPending: false\n    });\n  } // FOR REMINDER: \n  else if (action.type === SUBMIT_REMINDER_REQUEST) {\n      return Object.assign({}, state, {\n        pawfilesPending: true\n      });\n    } else if (action.type === CRUD_ERROR) {\n      return Object.assign({}, state, {\n        pawfilesPending: false,\n        error: true\n      });\n    } //not getting back a single reminder, but the whole pawfile. fix.\n    else if (action.type === SUBMIT_REMINDER_SUCCESS) {\n        var _updatedPawfile = action.pawfile;\n\n        var _newArrayOfPawfiles4 = state.pawfiles.map(function (item) {\n          return item.id == action.currentPetId ? _updatedPawfile : item;\n        });\n\n        console.log('in reminder reducer, new array of apwfiles is', _newArrayOfPawfiles4);\n        return Object.assign({}, state, {\n          pawfilesPending: false,\n          pawfiles: _newArrayOfPawfiles4\n        });\n      } else if (action.type === DELETE_REMINDER_REQUEST) {\n        return Object.assign({}, state, {\n          pawfilesPending: true\n        });\n      } else if (action.type === DELETE_REMINDER_SUCCESS) {\n        console.log('in deleting reminder success reducer');\n\n        var _pawfileToUpdate2 = _objectSpread({}, state.pawfiles.find(function (pawfile) {\n          return pawfile.id == action.currentPetId;\n        }));\n\n        var updatedReminders = _pawfileToUpdate2.reminders.filter(function (reminder) {\n          return reminder.id !== action.reminderId;\n        });\n\n        _pawfileToUpdate2.reminders = updatedReminders;\n        console.log('in delete reminder reducer, updated pawfile is', _pawfileToUpdate2); // const updatedPawfile = Object.assign({}, state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId), {\n        //   pawfileToUpdate\n        // })\n\n        var _newArrayOfPawfiles5 = state.pawfiles.map(function (item) {\n          return item.id == action.currentPetId ? _pawfileToUpdate2 : item;\n        });\n\n        console.log('newArrayOfPawfiles is', _newArrayOfPawfiles5);\n        return Object.assign({}, state, {\n          pawfiles: _newArrayOfPawfiles5,\n          pawfilesPending: false\n        });\n      }\n\n  return state;\n}; //load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display.","map":{"version":3,"sources":["/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/reducers/pawfile-reducer.js"],"names":["SHOW_PAWFILE_FORM","CHANGE_SORTING_PETS_METHOD","ADDING_NEW_REMINDER","TOGGLE_NAVBAR","DELETE_REMINDER","CHANGE_CURRENT_PET_ID","SHOW_MEDICAL_FORM","SUBMIT_MEDICAL_FORM","SHOW_MEMORY_FORM","SUBMIT_MEMORY_FORM","CHANGE_SEARCH_TERM","CHANGE_CATEGORY_FILTER","FETCH_PAWFILES_SUCCESS","FETCH_INDIVIDUAL_PAWFILE_SUCCESS","CHANGE_PAWFILES_PENDING","CHANGE_INDIVIDUAL_PAWFILE_PENDING","FETCH_INDIVIDUAL_PAWFILE_REQUEST","FETCH_INDIVIDUAL_PAWFILE_ERROR","CHANGE_ERROR","SUBMIT_PAWFILE_REQUEST","SUBMIT_PAWFILE_SUCCESS","DELETE_PAWFILE_REQUEST","DELETE_PAWFILE_SUCCESS","SUBMIT_REMINDER_REQUEST","SUBMIT_REMINDER_SUCCESS","CRUD_ERROR","DELETE_REMINDER_REQUEST","DELETE_REMINDER_SUCCESS","initialState","user","firstName","lastName","sortingPetsMethod","showPawfileForm","showMedicalForm","showMemoryForm","currentPetId","undefined","currentSearchTerm","categoryFilter","toggleNavbar","pawfiles","individualPawfile","pawfilesPending","individualPawfilePending","error","pawfileReducer","state","action","type","Object","assign","bool","pawfileToUpdate","find","pawfile","id","previousPosts","posts","values","vaccinations","vaccinationList","map","vaccination","name","date","previousVaccinations","prescriptions","prescriptionList","prescription","previousPrescriptions","newArrayOfPawfiles","item","sortMethod","console","log","searchTerm","updatedPawfile","filter","updatedReminders","reminders","reminder","reminderId"],"mappings":"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","sourcesContent":["import {SHOW_PAWFILE_FORM, CHANGE_SORTING_PETS_METHOD, ADDING_NEW_REMINDER, TOGGLE_NAVBAR, DELETE_REMINDER, CHANGE_CURRENT_PET_ID, SHOW_MEDICAL_FORM, SUBMIT_MEDICAL_FORM, SHOW_MEMORY_FORM, SUBMIT_MEMORY_FORM, CHANGE_SEARCH_TERM, CHANGE_CATEGORY_FILTER,} from '../actions/index';\n\nimport {FETCH_PAWFILES_SUCCESS, FETCH_INDIVIDUAL_PAWFILE_SUCCESS, CHANGE_PAWFILES_PENDING, CHANGE_INDIVIDUAL_PAWFILE_PENDING, FETCH_INDIVIDUAL_PAWFILE_REQUEST, FETCH_INDIVIDUAL_PAWFILE_ERROR, CHANGE_ERROR, SUBMIT_PAWFILE_REQUEST, SUBMIT_PAWFILE_SUCCESS, DELETE_PAWFILE_REQUEST, DELETE_PAWFILE_SUCCESS} from '../actions/pawfile-crud'\n\nimport {SUBMIT_REMINDER_REQUEST, SUBMIT_REMINDER_SUCCESS, CRUD_ERROR, DELETE_REMINDER_REQUEST, DELETE_REMINDER_SUCCESS} from '../actions/reminder-crud'\n\n//dummy initial state \nconst initialState = {\n  user: {firstName: 'Nikkie', lastName: 'Mashian'},\n  sortingPetsMethod: \"\",\n  showPawfileForm: false,\n  showMedicalForm: false,\n  showMemoryForm: false,\n  currentPetId: undefined,\n  currentSearchTerm: \"\",\n  categoryFilter: \"\",\n  toggleNavbar:false,\n  pawfiles: [],\n  individualPawfile: {},\n  pawfilesPending: true,\n  individualPawfilePending: true,\n  error:\"\"\n};\n\nexport const pawfileReducer = (state = initialState, action)=> {\n\n  //Either when user clicks \"add new pawfile\", or clicks to edit a current pawfile. Need to set the currentPetId to either the id of the pet being edited, or undefined if it's a new pet/closing form\n  if(action.type=== SHOW_PAWFILE_FORM){\n    return Object.assign({}, state, {\n      showPawfileForm: action.bool,\n      currentPetId: action.currentPetId\n    })\n  }\n\n  else if(action.type===SUBMIT_MEDICAL_FORM){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    //check if there's any previous posts for this pet. How we handle adding the new post depends on this.\n    let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n    if(previousPosts){\n      pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n    }\n    else{\n      pawfileToUpdate.posts = [action.values];\n    }\n\n    //check if there's any previous vaccinations, prescriptions, etc. for this pet. How we handle adding the new ones depends on this.\n    if(action.values.vaccinations)\n    {\n      let vaccinationList = action.values.vaccinations.map(vaccination=>{\n        return {name: vaccination, date: action.values.date}\n      })\n\n      let previousVaccinations = pawfileToUpdate.vaccinations  ? [...pawfileToUpdate.vaccinations ] : '';\n\n      if(previousVaccinations){\n        pawfileToUpdate.vaccinations = [...pawfileToUpdate.vaccinations, ...vaccinationList];      \n      }\n      else{\n        pawfileToUpdate.vaccinations = [...vaccinationList];\n      }\n    }\n\n    if(action.values.prescriptions)\n    {\n      let prescriptionList = action.values.prescriptions.map(prescription=>{\n        return {name: prescription, date: action.values.date}\n      })\n\n      let previousPrescriptions = pawfileToUpdate.prescriptions  ? [...pawfileToUpdate.prescriptions ] : '';\n\n      if(previousPrescriptions){\n        pawfileToUpdate.prescriptions = [...pawfileToUpdate.prescriptions, ...prescriptionList];\n     \n      }\n      else{\n        pawfileToUpdate.prescriptions = [...prescriptionList];\n      }\n    }\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if(action.type===SUBMIT_MEMORY_FORM){\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    let previousPosts = pawfileToUpdate.posts ? [...pawfileToUpdate.posts] : '';\n\n    if(previousPosts){\n      pawfileToUpdate.posts = [...pawfileToUpdate.posts, action.values];\n    }\n    else{\n      pawfileToUpdate.posts = [action.values];\n    }\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if (action.type=== CHANGE_SORTING_PETS_METHOD){\n    return Object.assign({}, state, {\n      sortingPetsMethod: action.sortMethod,\n    })\n  }\n\n  else if (action.type===TOGGLE_NAVBAR){\n    if(action.bool===true || action.bool===false){\n      return Object.assign({}, state, {\n        toggleNavbar: action.bool,\n      })\n    }\n    return Object.assign({}, state, {\n      toggleNavbar: !state.toggleNavbar,\n    })\n  }\n\n  else if(action.type===CHANGE_CURRENT_PET_ID){\n    console.log('changing id', action.currentPetId);\n    return Object.assign({}, state, {\n      currentPetId: action.currentPetId\n    })\n  }\n\n  else if(action.type===SHOW_MEDICAL_FORM){\n    return Object.assign({}, state, {\n      showMedicalForm: action.bool\n    })\n  }\n\n  else if(action.type===SHOW_MEMORY_FORM){\n    return Object.assign({}, state, {\n      showMemoryForm: action.bool\n    })\n  }\n\n  else if(action.type===CHANGE_SEARCH_TERM){\n    return Object.assign({}, state, {\n      currentSearchTerm: action.searchTerm,\n    })\n  }\n\n  else if(action.type===CHANGE_CATEGORY_FILTER){\n    return Object.assign({}, state, {\n      categoryFilter: action.categoryFilter,\n    })\n  }\n\n  else if(action.type===CHANGE_ERROR){\n    return Object.assign({}, state, {\n      error: action.bool,\n    })\n  }\n\n  else if (action.type === FETCH_PAWFILES_SUCCESS) {\n    console.log('successfully fetching all pawfiles', action.pawfiles);\n    return Object.assign({}, state, {\n      pawfiles: action.pawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_SUCCESS){\n    console.log('in success for indiv pawfile, fetched', action.pawfile);\n    return Object.assign({}, state, {\n      individualPawfile: action.pawfile,\n      individualPawfilePending: false,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      individualPawfilePending: true,\n    })\n  }\n\n  else if (action.type===FETCH_INDIVIDUAL_PAWFILE_ERROR){\n    console.log('in error of fetching');\n    return Object.assign({}, state, {\n      individualPawfilePending: false,\n      error: true,\n    })\n  }\n\n  else if(action.type===CHANGE_PAWFILES_PENDING){\n    console.log('changing pending to', action.bool);\n    return Object.assign({}, state, {\n      pawfilesPending: action.bool,\n    })\n  }\n\n  else if(action.type===  CHANGE_INDIVIDUAL_PAWFILE_PENDING){\n    return Object.assign({}, state, {\n      individualPawfilePending: action.bool,\n    })\n  }\n\n  else if (action.type===SUBMIT_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type===SUBMIT_PAWFILE_SUCCESS){\n    //if its editing an existing pawfile: \n    if(action.currentPetId){\n      console.log('updating in reducer with pawfile', action.pawfile);\n      const updatedPawfile = action.pawfile;\n\n      const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n  \n      return Object.assign({}, state, {\n          pawfiles: newArrayOfPawfiles,\n          // individualPawfile: action.pawfile,\n          pawfilesPending: false,\n      })\n    }\n\n    //if its a new obj\n    console.log('POST in reducer with pawfile', action.pawfile);\n    return Object.assign({}, state, {\n      pawfiles: [\n        ...state.pawfiles,\n        action.pawfile\n      ],\n      pawfilesPending: false,\n    })\n  }\n\n  else if (action.type===DELETE_PAWFILE_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if(action.type===DELETE_PAWFILE_SUCCESS){\n    console.log('in deleting success reducer')\n    const newArrayOfPawfiles = state.pawfiles.filter((pawfile)=> (pawfile.id!==action.currentPetId));\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n  // FOR REMINDER: \n  else if (action.type===SUBMIT_REMINDER_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n  else if (action.type===CRUD_ERROR){\n    return Object.assign({}, state, {\n      pawfilesPending: false,\n      error: true,\n    })\n  }\n\n  //not getting back a single reminder, but the whole pawfile. fix.\n  else if (action.type=== SUBMIT_REMINDER_SUCCESS){\n    const updatedPawfile = action.pawfile;\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? updatedPawfile : item))\n\n    console.log('in reminder reducer, new array of apwfiles is', newArrayOfPawfiles);\n    return Object.assign({}, state, {\n        pawfilesPending: false,\n        pawfiles: newArrayOfPawfiles\n    })\n  }\n\n  else if (action.type===DELETE_REMINDER_REQUEST){\n    return Object.assign({}, state, {\n      pawfilesPending: true,\n    })\n  }\n\n\n  else if(action.type=== DELETE_REMINDER_SUCCESS){\n    console.log('in deleting reminder success reducer')\n\n    let pawfileToUpdate = {...state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId)};\n\n    const updatedReminders = pawfileToUpdate.reminders.filter((reminder)=> (reminder.id!==action.reminderId));\n\n    pawfileToUpdate.reminders=updatedReminders;\n\n    console.log('in delete reminder reducer, updated pawfile is', pawfileToUpdate)\n\n    // const updatedPawfile = Object.assign({}, state.pawfiles.find(pawfile=> pawfile.id==action.currentPetId), {\n    //   pawfileToUpdate\n    // })\n\n    const newArrayOfPawfiles = state.pawfiles.map((item)=> (item.id==action.currentPetId ? pawfileToUpdate : item))\n\n    console.log('newArrayOfPawfiles is', newArrayOfPawfiles)\n\n    return Object.assign({}, state, {\n      pawfiles: newArrayOfPawfiles,\n      pawfilesPending: false,\n    })\n  }\n\n\n  return state;\n}\n\n\n//load all the pawfiles in state regardless of page, and then display what you want from that state. differentiate state from display. \n"]},"metadata":{},"sourceType":"module"}