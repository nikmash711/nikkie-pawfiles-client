{"ast":null,"code":"import _classCallCheck from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/components/input.js\";\nimport React from 'react';\nimport { todaysDate } from './helper-functions';\n\nvar Input =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input() {\n    _classCallCheck(this, Input);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Input).apply(this, arguments));\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.input.title.focus();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.meta.active && this.props.meta.active) {\n        this.input.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var Element = this.props.element || 'input';\n      var error;\n\n      if (this.props.meta.touched && this.props.meta.error) {\n        error = React.createElement(\"div\", {\n          className: \"form-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, this.props.meta.error);\n      }\n\n      var className = \"\"; //Question: better way to do this? \n\n      if (this.props.id === \"name\" || this.props.id === \"gender\" || this.props.id === \"species\" || this.props.id === \"img\" || this.props.id === \"date\" || this.props.id === \"title\") {\n        className = \"required\";\n      }\n\n      return React.createElement(\"div\", {\n        className: \"form-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: this.props.input.name,\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.props.label, error), React.createElement(Element, Object.assign({}, this.props.input, {\n        id: this.props.input.name,\n        type: this.props.type,\n        maxLength: this.props.type === \"textarea\" ? '180' : undefined,\n        max: this.props.type === \"date\" ? todaysDate() : undefined //Question: I only want max on date elements but not sure how else to do it\n        ,\n        ref: function ref(input) {\n          return _this.input = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), this.props.children));\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nexport { Input as default };","map":{"version":3,"sources":["/Users/nikkiemashian/Documents/Thinkful/Pawfiles/pawfiles/client/src/components/input.js"],"names":["React","todaysDate","Input","props","input","title","focus","prevProps","meta","active","Element","element","error","touched","className","id","name","label","type","undefined","children","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,oBAAzB;;IAEqBC,K;;;;;;;;;;;;;wCACE;AACf,WAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAAjB,CAAuBC,KAAvB;AACH;;;uCAEkBC,S,EAAW;AAC1B,UAAI,CAACA,SAAS,CAACC,IAAV,CAAeC,MAAhB,IAA0B,KAAKN,KAAL,CAAWK,IAAX,CAAgBC,MAA9C,EAAsD;AAClD,aAAKL,KAAL,CAAWE,KAAX;AACH;AACJ;;;6BAEQ;AAAA;;AACL,UAAMI,OAAO,GAAG,KAAKP,KAAL,CAAWQ,OAAX,IAAsB,OAAtC;AAEA,UAAIC,KAAJ;;AACA,UAAI,KAAKT,KAAL,CAAWK,IAAX,CAAgBK,OAAhB,IAA2B,KAAKV,KAAL,CAAWK,IAAX,CAAgBI,KAA/C,EAAsD;AAClDA,QAAAA,KAAK,GAAG;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6B,KAAKT,KAAL,CAAWK,IAAX,CAAgBI,KAA7C,CAAR;AACH;;AAED,UAAIE,SAAS,GAAC,EAAd,CARK,CAUL;;AACA,UAAG,KAAKX,KAAL,CAAWY,EAAX,KAAgB,MAAhB,IAA0B,KAAKZ,KAAL,CAAWY,EAAX,KAAgB,QAA1C,IAAqD,KAAKZ,KAAL,CAAWY,EAAX,KAAgB,SAArE,IAAkF,KAAKZ,KAAL,CAAWY,EAAX,KAAgB,KAAlG,IAA2G,KAAKZ,KAAL,CAAWY,EAAX,KAAgB,MAA3H,IAAqI,KAAKZ,KAAL,CAAWY,EAAX,KAAgB,OAAxJ,EAAiK;AAC7JD,QAAAA,SAAS,GAAC,UAAV;AACH;;AAGD,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWC,KAAX,CAAiBY,IAAjC;AAAuC,QAAA,SAAS,EAAEF,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKX,KAAL,CAAWc,KADhB,EAEKL,KAFL,CADJ,EAMI,oBAAC,OAAD,oBACQ,KAAKT,KAAL,CAAWC,KADnB;AAEI,QAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiBY,IAFzB;AAGI,QAAA,IAAI,EAAE,KAAKb,KAAL,CAAWe,IAHrB;AAII,QAAA,SAAS,EAAI,KAAKf,KAAL,CAAWe,IAAX,KAAkB,UAAlB,GAA8B,KAA9B,GAAsCC,SAJvD;AAKI,QAAA,GAAG,EAAI,KAAKhB,KAAL,CAAWe,IAAX,KAAkB,MAAlB,GAA0BjB,UAAU,EAApC,GAAyCkB,SALpD,CAMI;AANJ;AAOI,QAAA,GAAG,EAAE,aAAAf,KAAK;AAAA,iBAAK,KAAI,CAACA,KAAL,GAAaA,KAAlB;AAAA,SAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASC,KAAKD,KAAL,CAAWiB,QATZ,CANJ,CADJ;AAoBH;;;;EA/C8BpB,KAAK,CAACqB,S;;SAApBnB,K","sourcesContent":["import React from 'react';\nimport {todaysDate} from './helper-functions';\n\nexport default class Input extends React.Component {\n    componentDidMount(){\n        this.props.input.title.focus();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.meta.active && this.props.meta.active) {\n            this.input.focus();\n        }\n    }\n\n    render() {\n        const Element = this.props.element || 'input';\n\n        let error;\n        if (this.props.meta.touched && this.props.meta.error) {\n            error = <div className=\"form-error\">{this.props.meta.error}</div>;\n        }\n\n        let className=\"\";\n\n        //Question: better way to do this? \n        if(this.props.id===\"name\" || this.props.id===\"gender\" ||this.props.id===\"species\" || this.props.id===\"img\" || this.props.id===\"date\" || this.props.id===\"title\" ){\n            className=\"required\";\n        }\n        \n\n        return (\n            <div className=\"form-input\">\n                <label htmlFor={this.props.input.name} className={className}>\n                    {this.props.label}\n                    {error}\n                </label>\n            \n                <Element\n                    {...this.props.input}\n                    id={this.props.input.name}\n                    type={this.props.type}\n                    maxLength = {this.props.type===\"textarea\"? '180' : undefined}\n                    max = {this.props.type===\"date\"? todaysDate() : undefined}\n                    //Question: I only want max on date elements but not sure how else to do it\n                    ref={input => (this.input = input)}\n                >\n                {this.props.children}\n                </Element>  \n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}